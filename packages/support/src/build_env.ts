#!/usr/bin/env node

/**
 * 此文件包含三个功能，
 * 1. 自动创建env.ts文件，包含所有构建命令录入的参数和系统默认参数，可以使用 [-s ""] 关闭此功能
 * 2. 检索所有的 **\/*_impl.ts文件，生成 impl_list.ts文件，可以使用 [-e "login_impl,contact_impl"] 来排除包含某些实现
 * 3. 检索所有 api目录下文件，生成index.ts的 import * from "./api/[path]"
 */
import * as fs from 'fs-extra';
import sade from 'sade';
import * as path from 'path';
import { exec } from 'shelljs';
import { Set } from './create_env_src';
import { dataStore, EnvDefItem, envType, pascalToCamel, BlackUrlList } from './conf';
import { def, res } from './def';
// import {config} from "api/src/gen/env";
console.log('this is a env file builder');
// const shell = require('shelljs');
const prog = sade('buildEnv <value> [conf]', true);

/**
 * 地址：https://sirius-im.qiye.163.com/
 appkey：a149c9de87128410f04036cf3270fd7a
 appsecret：28e96ca50983
 * */

const processHomeDir = process.cwd();

// class Host {
//     // key: string]: string;
//     static dev: string = "https://su-desktop-web.cowork.netease.com:8000";
//     static test: string = "https://sirius-desktop-web.cowork.netease.com";
//     static prod: string = "https://sirius-desktop-web.cowork.netease.com";  //上线的时候修改这个地址
// }
//
// class ImportantScript {
//     static dev: string = "return type+generate;";
//     static test: string = "";
//     static prod: string = "";
// }
interface buildOpts {
  source: string;
  envFileName: string;
  implFileName: string;
  componentScan: string;
  exclude?: string;
  exportScan: string;
  indexFileName: string;
}

// type ENV = keyof Host;
function buildJsContent(value: dataStore, scriptGen: (dt: dataStore) => string[]): string[] {
  const line = value.stage === 'prod' ? '' : JSON.stringify(value);
  const script: string[] = scriptGen(value);
  const src = encodeURIComponent(script[0]);
  //   const scriptLine = script
  //     ? `
  // /**
  // * generated by build_env script (author:shisheng@qy.163.com) , don't modify
  // **/
  // //@ts-ignore
  // export const config:(type:string,generate?:string)=>string|string[]|Function =((
  //     function(){
  //         //@ts-ignore
  //         var func=Function(decodeURIComponent("${src}")+";\\n"+ " return confFunc;");
  //         return func();
  //     })());
  // `
  //     : '';
  const scriptLine = script
    ? `/**
 * generated by build_env script (author:shisheng@qy.163.com) , don't modify
 **/
//@ts-ignore
export const config:(type:string,generate?:string)=>string|string[]|Function =(
        (new Function(decodeURIComponent("${src}")+";\\n"+ " return confFunc;"))()
        );
`
    : '';
  const contents = `
    /**  conf is :
    /* ${line}
    **/
    ${scriptLine}
        `;
  return [contents, script[1], script[0]];
}

function buildDebugHtmlContent(contents: string) {
  return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>worker 测试页面 </title>

</head>
<body>
<script>
var test=(function (){
  ${contents}
  return confFunc;
  })();
for(var i =0 ; i<10000; i++){
    console.log('test ',test('fname'));
    console.log('test ',test('os'));
    console.log('test ',test('accountPwdAutoFilled'));
    console.log('test ',test('build_date'));
    console.log('test ',test('version'));
    const rsa=test('','encryptRSA')('00923bceb4d568a58875784230bbbe5fcfc31841f61f004ca39bf16dd27b88a2bb4dce652813d74b8' +
     '2f17efaab065e2af3cd2efe5b098390fb8dfad06804ceaf3a2d70072c3750741790667d521ece79a097aa6f9ee20711355ae9ac80a4193' +
      '47701463b17c4e27e204bac2292905195bfb2a289fa04aa4404ede5a9a2e0fb1005', 
    '010001', 'yPA4a1NS', 'ssand11325'+i);
    console.log('test rsa',rsa);
    
}
</script>
</body>
</html>
    `;
}

async function writeCjsEntryFile(contents: string, fileName?: string) {
  const fpos: string | undefined = fileName;
  if (fpos && fpos.length > 0) {
    const file = path.join(processHomeDir, fpos);
    console.log('write evn file to ' + file);
    return fs.outputFile(file, contents);
  }
  return Promise.resolve();
}

const pattern = /([a-zA-Z0-9_]+)=('([^']+)'|([^ \t]+))/g;
const originBlackList = [
  '/cospread/uni/',
  '/todo/',
  '/meeting/',
  '/praise-mail',
  '/site',
  '/smartmailbox',
  '/lxactivity/',
  '/im/api/',
  '/mail-plus/',
  '/edisk',
  '/corp-mail',
  '/silk/',
  '/customer/',
  '/customs/',
  '/sns-server/',
  '/facebook-server',
  '/it-notify-manage/',
  '/it-plugins',
  '/globalSearch/',
  '/regular-customer',
  '/address-book',
  '/cowork/api/biz/icon/uploadIcon',
  '/edm/',
  '/sirius/discourse-template/',
  '/mailTemplateApi/',
  '/sirius/operation/',
  '/sirius/edm-hosting/',
  '/sirius/it-whatsapp-server/',
  '/sns-sender-adapter/',
  '/sirius/sns-server/',
  '/sirius/sns-template-server/',
  '/workbench-server/',
  '/article/',
  '/it-others/',
  '/auto-market/',
  '/task-center/',
  '/sirius/social-media-server/',
  '/freight-forwarding/',
  '/ffms/',
];
async function buildEnv(opts: buildOpts | undefined, conf: envType, value: string) {
  let fileName = '';
  if (opts) {
    fileName = opts.envFileName ? opts.source + opts.envFileName : '';
  }
  const envDef = def[conf] || def.local;
  // const h = envDef.host;
  const s = envDef.script as (dt: dataStore) => string[];
  let r;
  console.log('build env.ts for env : ' + conf);
  // #region corpMail相关常量
  const blackUrlList: BlackUrlList = {};
  Object.keys(envDef).forEach((it: string) => {
    const defElement = envDef[it as keyof EnvDefItem];
    if (typeof defElement === 'string') {
      res[it] = defElement;
    }
  });
  res.apiContextPath = res.apiContextPath || '';
  Object.keys(res).forEach((it: string) => {
    const defVal = res[it];
    if (typeof defVal === 'string' && defVal.startsWith('/')) {
      //  判断是url,包含在黑名单内
      // console.warn('env blackList item', defVal);
      const isContained = originBlackList.some(path => defVal.startsWith(path));
      blackUrlList[res.apiContextPath + defVal] = isContained;
    }
  });
  res.blackUrlList = blackUrlList;
  // res['debug'] = 'true';
  // eslint-disable-next-line no-cond-assign
  if (process.platform === 'win32') {
    // @ts-ignore
    value = value.replace(/\$/g, ' ').replace(/'/g, '');
  }
  do {
    r = pattern.exec(value);
    if (r) res[r[1]] = r[3] || r[4];
  } while (r);
  const now = new Date();
  const loginfo = exec('git log -n 1\n');
  res.build_date = now.getFullYear() + '-' + (now.getMonth() + 1) + '-' + now.getDate() + ' ' + now.getHours() + ':' + now.getMinutes() + '/' + conf + '\n /' + loginfo;
  res.versionTime = String(now.getTime());
  res.fname = (opts && opts.envFileName) || '';
  res.profile = conf || 'local';
  res.contextPath = res.contextPath || '';

  res.productName = res.productName || '网易灵犀办公';
  if (!res.stage) {
    res.stage = 'local';
  }
  const contents = buildJsContent(res, s);
  if (opts?.envFileName) {
    await writeCjsEntryFile(contents[0], fileName);
    console.log('build env.ts for store : ', res);
  }

  if (res.stage && typeof res.stage === 'string' && res.stage.startsWith('local')) {
    let htmlFile = '';
    if (opts) {
      htmlFile = opts.envFileName ? opts.source + opts.envFileName + '.html' : '';
    }
    const html = buildDebugHtmlContent(contents[2]);
    if (opts?.envFileName) {
      await writeCjsEntryFile(html, htmlFile);
    }
    let srcMapFile = '';
    if (opts) {
      srcMapFile = opts.envFileName ? opts.source + opts.envFileName + '.html.map' : '';
    }
    if (opts?.envFileName) {
      await writeCjsEntryFile(contents[1], srcMapFile);
    }
  }
  return res;
}

type pathItem = {
  path: string;
  fname: string;
  fullPath: string;
};

// eslint-disable-next-line max-params
async function scan(rootFolder: string, implList: pathItem[], exculde: Set, fpath: string[], appendix?: string, filter?: (fname: pathItem) => boolean) {
  const files = await fs.readdir(rootFolder);
  // eslint-disable-next-line no-restricted-syntax
  for (const fname of files) {
    if (fname in exculde) {
      console.log('ignore file :' + fname);
    } else {
      const fullPath = path.join(rootFolder, fname);
      // eslint-disable-next-line no-await-in-loop
      const status = await fs.stat(fullPath);
      if (status.isDirectory() && !status.isSymbolicLink()) {
        fpath.push(fname);
        // eslint-disable-next-line no-await-in-loop
        await scan(fullPath, implList, exculde, fpath, appendix, filter);
        fpath.pop();
      } else if (status.isFile() && (typeof appendix === 'undefined' || fname.endsWith(appendix))) {
        const items: pathItem = {
          fullPath,
          fname: appendix ? fname.replace(appendix, '') : fname,
          path: fpath.join('/').replace(/\\/g, '/'),
        };
        if (typeof filter === 'undefined' || filter(items)) {
          implList.push(items);
        }
      } else {
        // do nothing
      }
    }
  }
}

function resolvePath(file: string, rootFolder: string) {
  if (file === rootFolder) {
    return '.';
  }
  const relative = path.relative(file, rootFolder);
  return relative.startsWith('.') ? relative : './' + relative;
}

async function buildImplList(
  opts: buildOpts | undefined,
  conf: envType,
  // eslint-disable-next-line no-unused-vars
  _: dataStore
) {
  // console.log('build impl for store : ', dataStore);
  const name = opts?.implFileName;
  if (!name) {
    return;
  }
  console.log('build impl for env : ' + conf);
  const fname = opts?.source + name;
  const file = path.dirname(path.resolve(processHomeDir, fname));
  const exculde: Set = opts?.exclude ? new Set(opts.exclude.split(',')) : {};
  const implList: pathItem[] = [];
  const rootStrs = opts?.componentScan;
  const rootFolders = rootStrs && rootStrs.split(',');
  if (rootFolders && rootFolders.length > 0) {
    // eslint-disable-next-line no-restricted-syntax
    for (const rootStr of rootFolders) {
      const rootFolder = path.resolve(processHomeDir, rootStr);
      const fpath = [resolvePath(file, rootFolder)];
      // eslint-disable-next-line no-await-in-loop
      await scan(rootFolder, implList, exculde, fpath, '.ts', e => typeof e.fname !== 'undefined' && e.fname.length > 5 && e.fname.endsWith('_impl'));
      console.log('got file list ', implList);
    }
    const script = _.initScript || '';
    const content = `/**
 * generated by build_env script (author:shisheng@qy.163.com) , don't modify
 * */
${script}
import { api } from '@/api/api';
import { ApiManager } from '../api_manager';
${implList.map(v => `import ${pascalToCamel(v.fname)} from '${v.path}/${v.fname}';`).join('\n')}
import { inWindow } from '@/config';
${implList.map(v => `api.registerLogicalApi(${pascalToCamel(v.fname)});`).join('\n')}
const apis = [
  ${implList.map(v => pascalToCamel(v.fname) + '.name').join(', ')}
];
const am = new ApiManager(apis);
export const initApi = () => {
  if (inWindow()) {
    am.triggerApiLifeCycleEvent(
      {
        event: 'init',
        curPath: location,
      },
    );
  }
}
export const apisManager = am;
export default apis;
`;
    await writeCjsEntryFile(content, fname);
  }
}

async function buildIndex(
  opts: buildOpts | undefined,
  conf: envType,
  // eslint-disable-next-line no-unused-vars
  _: dataStore
) {
  const name = opts?.indexFileName;
  if (!name) {
    return;
  }
  console.log('build index for env : ' + conf);
  // console.log('build index for store : ', dataStore);
  const fname = opts?.source + name;
  const file = path.dirname(path.resolve(processHomeDir, fname));
  const exculde: Set = opts?.exclude ? new Set(opts.exclude.split(',')) : {};
  const implList: pathItem[] = [
    {
      fname: 'config',
      fullPath: '',
      path: '.',
    },
    {
      fname: 'common',
      fullPath: '',
      path: '.',
    },
    {
      fname: 'index.d',
      fullPath: '',
      path: '.',
    },
  ];
  const rootDir = opts?.exportScan;
  if (!rootDir) {
    return;
  }
  const rootFolder = path.resolve(processHomeDir, rootDir);
  const fpath = [resolvePath(file, rootFolder)];
  await scan(rootFolder, implList, exculde, fpath, '.ts');
  const content = `/*
 * generated by build_env script (author:shisheng@qy.163.com) , don't modify
 */
${implList
  .filter(v => !v.fname.endsWith('.d'))
  .map(v => "export * from '" + v.path + '/' + v.fname + "';")
  .join('\n')}
`;
  await writeCjsEntryFile(content, fname + '.ts');
  const contentDef = `/*
 * generated by build_env script (author:shisheng@qy.163.com) , don't modify
 */
${implList
  .filter(v => v.fname.endsWith('.d'))
  .map(v => "export * from '" + v.path + '/' + v.fname + "';")
  .join('\n')}
`;
  await writeCjsEntryFile(contentDef, fname + '_def.d.ts');
}

prog
  .version('1.0.0')
  .describe('build env.ts, impl_list.ts in src folder based on the input values')
  .example("buildEnv 'a=b c=d xx='abc feg'' prod [options]")
  .option('--source', 'specify the env file position，empty string will not emit config file', './src/')
  .example('--source "../../test"')
  .option('--envFileName', 'specify the env file position，empty string will not emit config file', '')
  .example('--envFileName "test_env.ts"')
  .option('--implFileName', 'specify the impl_list file position，empty string will not emit config file', 'gen/impl_list.ts')
  .example('--implFileName "another_impl_list.ts"')
  .option('--indexFileName', 'specify the index file position，empty string will not emit config file, default appendix is "ts" ', 'index')
  .example('--indexFileName "another_index"')
  .option('--componentScan', 'specify the root folder to scan the implements source file', './src/impl/api_data,./src/impl/api_system,./src/impl/logical')
  .example('--componentScan "../../src"')
  // .option("--exclude,-e", "specify the file name which won't be include",
  // "login_mock_impl.ts,mock_impl.ts,org_impl.ts,contact_impl.ts,contact_db_impl.ts")
  .option('--exclude,-e', "specify the file name which won't be include", 'login_mock_impl.ts,mock_impl.ts,org_impl.ts,contact_event_impl.ts')
  .example('--exclude "login_impl,contact_impl"')
  .option('--exportScan', 'build index.ts from scan the specified folder', './src/api')
  .example('--exportScan "./src/api"')
  .action(async (value: string, conf: envType, opts?: buildOpts) => {
    console.log('running dir and script:', processHomeDir, __filename);
    console.log('opts', opts);
    console.log('conf', conf);
    const dataStore = await buildEnv(opts, conf, value);
    await buildImplList(opts, conf, dataStore);
    await buildIndex(opts, conf, dataStore);
  });
prog.parse(process.argv);
